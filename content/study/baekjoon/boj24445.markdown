---
title: "백준 24445 BFS"
date: 2022-10-15
draft: false
category: [study]
subcategories: [baekjoon]
tags: [Algorithm, Baekjoon]
---

![문제](./img/백준24445.png)

24445번 문제에 중의사항은 `내림차순`인것같다. 나는 내림차순을 생각하기 않고 풀다가 한번 틀렸다.

BFS에서 중요한 개념은 `큐`와 `그래프`이다.

<!--mode-->

![](/images/study/baekjoon/24445/1.png)

우선 내가 구현한 코드부터 살펴보겠다.

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 백준24445 {
	static ArrayList<Integer>[] list;
	static int N, M, S;
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		S = Integer.parseInt(st.nextToken());
		
		list = new ArrayList[N+1];
		for(int i = 1; i <= N; i++) {
			list[i] = new ArrayList<>();
		}
		
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			list[x].add(y);
			list[y].add(x);
		}
		BFS(S);
	}
	static void BFS(int S) {
		Queue<Integer> q = new LinkedList<Integer>();
		boolean[] visited = new boolean[N+1];
		int cnt = 0;
		int[] result = new int[N+1];
		for (int i = 1; i <= N; i++) { 
			Collections.sort(list[i], Collections.reverseOrder());
		}
		q.add(S);
		visited[S] = true;
		while(!q.isEmpty()) {
			int Q = q.poll();
			result[Q] = ++cnt;
			for(int i:list[Q]) {
				if(!visited[i]) {
					visited[i] = true;
					q.add(i);
				}
			}
		}
		for(int i = 1 ; i <= N; i++) { 
			System.out.println(result[i]);
	}
	}
}
```

이 문제를 풀면서 까먹었던 문법을 복습할 수 있었다. 먼저 **ArrayList**를 2차원 배열로 선언하는 방법이다.
`static ArrayList<Integer>[] list;` 이렇게 배열로 생성하게 되면 2차원 배열로 선언이 된 것이다. 그 후에

```java
for(int i = 1; i <= N; i++){
    list[i] = new ArrayList<>();
}
```
이 코드를 이용해 배열 원소를 인스턴스로 지정해 주었다.

코드는 다른 BFS문제와 크게 다른건 없지만 크게 보면 Main함수에서는 그래프를 그려주고, BFS함수에서 탐색을 진행한다. 먼저 Main 부분에서 2차원 배열안에 양방향 그래프를 저장해주었다. 양방향 그래프는 양쪽 방향이 모두 연결되어있어야 한다. `list[x].add(y) / list[y].add(x)` 를 이용해 양방향에 간선을 이어준 것이다.

백준 예제입력으로 2차원 배열안에 연결된 정점에 대해 살펴보겠다.

![1](./images/study/baekjoon/24445/2.png)
![2](./images/study/baekjoon/24445/3.png)
![3](./images/study/baekjoon/24445/4.png)
![4](./images/study/baekjoon/24445/5.png)
![5](./images/study/baekjoon/24445/6.png)

이렇게 순서대로 양방향에 간선이 생기는걸 확인 할 수 있다.

탐색부분은 Queue를 이용했다. 너비 우선 탐색이기 때문에 첫 시작인 1번 노드에 연결된 노드부터 모두 확인해야한다. visited변수를 이용해 이미 확인한 노드에 다시 방문하지 않도록 해주어야 한다. 1번노드에 연결되었던 노드는 2,4번이고, 내림차순 정렬을 했기때문에 4번 노드 확인 후 2번 노드를 확인하게 된다.

확인한 노드에 연결된 노드들을 for문을 이용하여 확인했다. 확인이 끝난 노드는 Queue에 저장시켜 FIFO시켜주었다.
